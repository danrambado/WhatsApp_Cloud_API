"""aa

Revision ID: cd6dd8d18a25
Revises: 
Create Date: 2023-03-19 19:58:14.718306

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cd6dd8d18a25'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # Eliminar restricciones de clave foránea
    op.drop_constraint('appointments_doctor_id_fkey', 'appointments', type_='foreignkey')
    op.drop_constraint('appointments_patient_id_fkey', 'appointments', type_='foreignkey')
    op.drop_constraint('appointmentstest_doctor_id_fkey', 'appointmentstest', type_='foreignkey')
    op.drop_constraint('appointmentstest_patient_id_fkey', 'appointmentstest', type_='foreignkey')
    op.drop_constraint('doctors_pkey', 'doctors', type_='primary')
    op.drop_constraint('patients_pkey', 'patients', type_='primary')
    # Eliminar índices
    op.drop_index('ix_appoinments_id', table_name='appoinments')
    op.drop_index('ix_appointmentsTEST_id', table_name='appointmentsTEST')
    op.drop_index('ix_appointmentstest_id', table_name='appointmentstest')
    op.drop_index('ix_appointments_id', table_name='appointments')
    op.drop_index('ix_patients_id', table_name='patients')
    op.drop_index('ix_doctors_id', table_name='doctors')
    op.drop_index('ix_person_id', table_name='person')
    # Eliminar tablas
    op.drop_table('appointments')
    op.drop_table('appointmentstest')
    op.drop_table('appointmentsTEST')
    op.drop_table('doctors')
    op.drop_table('patients')
    op.drop_table('person')




    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('person',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('idpersona', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('OsId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_only', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('time_only', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('rrhhid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='person_pkey')
    )
    op.create_index('ix_person_id', 'person', ['id'], unique=False)
    op.create_table('appointments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], name='appointments_doctor_id_fkey'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name='appointments_patient_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='appointments_pkey')
    )
    op.create_index('ix_appointments_id', 'appointments', ['id'], unique=False)
    op.create_table('doctors',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('doctors_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='doctors_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_doctors_id', 'doctors', ['id'], unique=False)
    op.create_table('appointmentstest',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctors.id'], name='appointmentstest_doctor_id_fkey'),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name='appointmentstest_patient_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='appointmentstest_pkey')
    )
    op.create_index('ix_appointmentstest_id', 'appointmentstest', ['id'], unique=False)
    op.create_table('appointmentsTEST',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"appointmentsTEST_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('patient_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='appointmentsTEST_pkey')
    )
    op.create_index('ix_appointmentsTEST_id', 'appointmentsTEST', ['id'], unique=False)
    op.create_table('appoinments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('idpersona', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('OsId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_only', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('time_only', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('rrhhid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='appoinments_pkey')
    )
    op.create_index('ix_appoinments_id', 'appoinments', ['id'], unique=False)
    op.create_table('patients',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='patients_pkey'),
    sa.UniqueConstraint('email', name='patients_email_key')
    )
    op.create_index('ix_patients_id', 'patients', ['id'], unique=False)
    # ### end Alembic commands ###
